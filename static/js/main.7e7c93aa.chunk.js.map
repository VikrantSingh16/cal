{"version":3,"sources":["cal.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","numa","numb","value","App","useState","result","setResult","className","src","cal","height","width","onChange","event","parseInt","target","type","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,iC,gGCGvCC,EAAKC,EAAKC,E,+DAyDCC,MAxDf,WAAe,IAAD,EACYC,mBAAS,cADrB,mBACNC,EADM,KACCC,EADD,KAgCb,OACG,yBAAKC,UAAU,aACd,yBAAKC,IAAKC,IAAKC,OAAO,QAAQC,MAAM,UACnC,wBAAIJ,UAAU,QAAd,qBACJ,wBAAIA,UAAU,UAAd,WAAgCF,GAC5B,2BAAOO,SAnCZ,SAAcC,GACfb,EAAKc,SAASD,EAAME,OAAOb,MAAM,KAkCJc,KAAK,SAASC,YAAY,uBAJnD,IAIiF,6BAC/E,2BAAOL,SAjCZ,SAAcC,GACbZ,EAAKa,SAAUD,EAAME,OAAOb,MAAM,KAgCPc,KAAK,SAASC,YAAY,wBAA8B,6BAC/E,2BAAOL,SA/BV,SAAcC,GACjBX,EAAMW,EAAME,OAAOb,MAEjBI,EADQ,KAAPJ,GAAmB,QAAPA,GAAsB,OAAPA,EAClBF,EAAKC,EAEF,KAAPC,GAAmB,SAAPA,GAAuB,YAAPA,EACxBF,EAAKC,EAEF,KAAPC,GAAmB,UAAPA,GAAwB,OAAPA,EACzBF,EAAKC,EAEF,KAAPC,GAAmB,KAAPA,GAAmB,YAAPA,GAA0B,QAAPA,EACvCF,EAAKC,EAEF,WAAPC,GAAyB,WAAPA,EACd,wBAEG,SAAPA,GAAuB,SAAPA,GAAuB,SAAPA,EAC5B,GAGA,0BAUiBc,KAAK,OAAOC,YAAY,kBAC/C,yBAAKV,UAAU,QAChB,4CACA,yCACC,yEACM,+FACA,0GACA,uFACA,kGACA,gEACA,wBAAIA,UAAU,QAAd,yBCzCQW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7e7c93aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cal.ee50e50d.png\";","import React, { useState } from 'react';\nimport \"../src/App.css\"\nimport cal from \"./cal.png\"\nvar numa,numb,value;\nfunction App(){\n const [result,setResult]=useState(\"Hey there!\");\n function num1(event){\nnuma=parseInt(event.target.value,10);\n }\n function num2(event){\n  numb=parseInt( event.target.value,10);\n   }\n   function todo(event){\nvalue=event.target.value;\nif(value==\"+\"||value==\"plus\"||value==\"add\"){\n  setResult(numa+numb)\n}\nelse if(value==\"-\"||value==\"minus\"||value==\"subtract\"){\n  setResult(numa-numb);\n}\nelse if(value==\"/\"||value==\"divide\"||value==\"div\"){\n  setResult(numa/numb);\n}\nelse if(value==\"*\"||value==\"x\"||value==\"multiply\"||value==\"into\"){\n  setResult(numa*numb);\n}\nelse if(value==\"vikrant\"||value==\"Vikrant\"){\n  setResult(\"Made by Vikrant Singh\")\n}\nelse if(value==\"clear\"||value==\"Clear\"||value==\"CLEAR\"){\n  setResult(\"\");\n}\nelse{\n  setResult(\"Read the Instructions\")\n}\n   }\n return (\n    <div className=\"container\">\n     <img src={cal} height=\"100px\" width=\"100px\"/>\n      <h1 className=\"logo\">SIMPLE CALCULATOR</h1>\n  <h1 className=\"output\">Output: {result}</h1>\n      <input onChange={num1} type=\"number\" placeholder=\"Enter First Number\"></input> <br/>\n      <input onChange={num2} type=\"number\" placeholder=\"Enter Second Number\"></input><br/>\n      <input onChange={todo} type=\"text\" placeholder=\"Enter Command\"></input>\n      <div className=\"info\">\n     <h1>INSTRUCTION:</h1>\n     <h2>COMMANDS:</h2>\n      <h3>Add: for add you can use + or add or plus</h3>\n            <h3>Subtract: for subtract you can use \"-\" or \"subtract\" or \"minus\"</h3>\n            <h3>Multiply: for multiply you can use \"x\" or \"X\" or \"*\" or multiply or \"into\"</h3>\n            <h3>Divide: for divide you can use \"/\" or \"div\" or \"divide\"</h3>\n            <h3>Clear: for clear you can use keyword \"clear\" or \"Clear\" or \"CLEAR\"</h3>\n            <h1>Thanks for using this CALCULATOR</h1>\n            <h1 className=\"made\">Made by Vikrant ;)</h1>\n            </div>\n    </div>\n    \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}